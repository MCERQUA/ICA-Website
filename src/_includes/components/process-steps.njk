{# Process Steps Component #}
{# 
  Usage: {% include "components/process-steps.njk" %}
  
  Variables:
  - process: Array of step objects with title and description
  - processTitle: Optional title for the section (default: "Our Process")
#}

<div class="process-steps">
  <h2 class="section-title">{{ processTitle or "Our Process" }}</h2>
  <div class="steps-wrapper">
    {% for step in process %}
    <div class="process-step" data-step="{{ loop.index }}">
      <div class="step-number">{{ loop.index }}</div>
      <div class="step-content">
        <h3>{{ step.title }}</h3>
        <p>{{ step.description }}</p>
      </div>
    </div>
    {% endfor %}
  </div>
</div>

<style>
.process-steps {
  padding: 3rem 0;
}

.process-steps .section-title {
  text-align: center;
  font-size: 2.5rem;
  color: var(--primary);
  margin-bottom: 3rem;
  text-transform: uppercase;
  letter-spacing: 2px;
  background: var(--text-gradient);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: gradient-flow 3s ease infinite;
}

.steps-wrapper {
  position: relative;
  display: grid;
  gap: 2rem;
  align-items: start;
  max-width: 1200px;
  margin: 0 auto;
}

/* Desktop layout - responsive grid based on number of steps */
@media (min-width: 1024px) {
  .steps-wrapper {
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    max-width: 1400px;
  }
  
  /* For 3 steps or fewer, limit to that many columns */
  .steps-wrapper[data-step-count="1"] {
    grid-template-columns: 1fr;
    max-width: 400px;
  }
  
  .steps-wrapper[data-step-count="2"] {
    grid-template-columns: repeat(2, 1fr);
    max-width: 800px;
  }
  
  .steps-wrapper[data-step-count="3"] {
    grid-template-columns: repeat(3, 1fr);
    max-width: 1200px;
  }
  
  /* Connection line for desktop */
  .steps-wrapper::before {
    content: '';
    position: absolute;
    top: 60px;
    left: 10%;
    right: 10%;
    height: 2px;
    background: linear-gradient(90deg, transparent 0%, var(--glow-primary) 20%, var(--glow-primary) 80%, transparent 100%);
    z-index: 0;
    opacity: 0.3;
  }
}

/* Tablet layout */
@media (min-width: 769px) and (max-width: 1023px) {
  .steps-wrapper {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    max-width: 900px;
  }
}

.process-step {
  position: relative;
  text-align: center;
  padding: 2.5rem 1.5rem;
  background: var(--surface-dark);
  border: 1px solid var(--border-color);
  border-radius: 12px;
  transition: all 0.3s ease;
  z-index: 1;
}

.process-step:hover {
  transform: translateY(-8px);
  border-color: var(--glow-primary);
  box-shadow: 0 15px 40px rgba(0, 255, 255, 0.3);
}

.step-number {
  width: 70px;
  height: 70px;
  margin: 0 auto 1.5rem;
  background: var(--glow-gradient);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.8rem;
  font-weight: bold;
  color: var(--surface-dark);
  position: relative;
  overflow: hidden;
}

.step-number::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(0, 255, 255, 0.5) 0%, transparent 70%);
  transform: translate(-50%, -50%);
  animation: pulse 2s ease-in-out infinite;
}

.step-number::after {
  content: '';
  position: absolute;
  top: -3px;
  left: -3px;
  right: -3px;
  bottom: -3px;
  background: var(--glow-gradient);
  border-radius: 50%;
  opacity: 0.5;
  z-index: -1;
  animation: rotate 4s linear infinite;
}

.step-content h3 {
  font-size: 1.4rem;
  color: var(--primary);
  margin-bottom: 1rem;
  text-transform: uppercase;
  letter-spacing: 1px;
  font-weight: 600;
}

.step-content p {
  color: var(--text-light);
  line-height: 1.6;
  font-size: 1rem;
}

/* Mobile layout - vertical timeline */
@media (max-width: 768px) {
  .steps-wrapper {
    grid-template-columns: 1fr;
    position: relative;
    padding-left: 50px;
    gap: 2.5rem;
  }
  
  .steps-wrapper::before {
    content: '';
    position: absolute;
    top: 35px;
    bottom: 35px;
    left: 35px;
    width: 3px;
    background: linear-gradient(180deg, transparent 0%, var(--glow-primary) 10%, var(--glow-primary) 90%, transparent 100%);
    opacity: 0.4;
    border-radius: 2px;
  }
  
  .process-step {
    text-align: left;
    padding: 2rem;
    margin-left: 0;
  }
  
  .step-number {
    position: absolute;
    left: -50px;
    top: 2rem;
    margin: 0;
    width: 50px;
    height: 50px;
    font-size: 1.4rem;
  }
  
  .step-content {
    margin-left: 0;
  }
  
  .process-steps .section-title {
    font-size: 2rem;
    margin-bottom: 2rem;
  }
  
  .step-content h3 {
    font-size: 1.2rem;
  }
  
  .step-content p {
    font-size: 0.95rem;
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 0.5;
    transform: translate(-50%, -50%) scale(1);
  }
  50% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.1);
  }
}

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Set data attribute for step count to help with CSS grid
  const stepsWrappers = document.querySelectorAll('.steps-wrapper');
  stepsWrappers.forEach(wrapper => {
    const stepCount = wrapper.querySelectorAll('.process-step').length;
    wrapper.setAttribute('data-step-count', stepCount);
  });
});
</script>